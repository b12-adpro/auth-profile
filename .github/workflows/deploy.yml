name: Deploy to Koyeb

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Removed JDK setup and JAR build steps as they are now handled by the Dockerfile's multi-stage build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v3 # Use v3 for latest
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_FULL_IMAGE_NAME }} .
          docker push ${{ secrets.DOCKER_FULL_IMAGE_NAME }}

      - name: Get Previous Deployment ID
        id: get_previous
        run: |
          response=$(curl -s -X GET "https://app.koyeb.com/v1/services/${{ secrets.KOYEB_SERVICE_ID }}/deployments" \
            -H "Authorization: Bearer ${{ secrets.KOYEB_API_KEY }}")
          prev_id=$(echo "$response" | jq -r '.deployments[] | select(.status=="SUCCESS") | .id' | head -n 1)
          echo "Previous successful deployment: $prev_id"
          echo "prev_deployment_id=$prev_id" >> $GITHUB_OUTPUT



      - name: Verify Deployment
        # This step is mostly for verification. Koyeb will handle the actual redeploy.
        # You can add a small delay and then check service status or logs if you have Koyeb CLI configured.
        # For simplicity, we'll assume Koyeb's auto-deployment works.
        run: echo "Koyeb service configured for automatic deployment from Docker Hub. New image pushed."
        
      - name: Trigger New Deployment
        id: trigger_redeploy
        run: |
          curl -s -X POST "https://app.koyeb.com/v1/services/${{ secrets.KOYEB_SERVICE_ID }}/redeploy" \
            -H "Authorization: Bearer ${{ secrets.KOYEB_API_KEY }}" \
            -H "Content-Type: application/json" \
            --data '{}' 
          echo "Triggered redeploy"

      - name: Wait and Check Deployment Status
        id: check_status
        run: |
          echo "Waiting for deployment to stabilize..."
          sleep 30  # wait for new deployment to start
          
          latest_deployment_id=$(curl -s -X GET "https://app.koyeb.com/v1/services/${{ secrets.KOYEB_SERVICE_ID }}/deployments" \
            -H "Authorization: Bearer ${{ secrets.KOYEB_API_KEY }}" | jq -r '.deployments[0].id')

          echo "New deployment ID: $latest_deployment_id"
          echo "latest_deployment_id=$latest_deployment_id" >> $GITHUB_OUTPUT

          for i in {1..10}; do
            status=$(curl -s -X GET "https://app.koyeb.com/v1/services/${{ secrets.KOYEB_SERVICE_ID }}/deployments/$latest_deployment_id" \
              -H "Authorization: Bearer ${{ secrets.KOYEB_API_KEY }}" | jq -r '.status')
            
            echo "Attempt $i - Deployment status: $status"
            if [ "$status" = "SUCCESS" ]; then
              echo "Deployment succeeded"
              exit 0
            elif [ "$status" = "FAILED" ]; then
              echo "Deployment failed"
              exit 1
            fi

            sleep 10
          done

          echo "Deployment did not complete within expected time"
          exit 1

      - name: Rollback if Deployment Failed
        if: failure()
        run: |
          echo "Rolling back to previous deployment: ${{ steps.get_previous.outputs.prev_deployment_id }}"
          curl -X POST "https://app.koyeb.com/v1/services/${{ secrets.KOYEB_SERVICE_ID }}/deployments/${{ steps.get_previous.outputs.prev_deployment_id }}/redeploy" \
            -H "Authorization: Bearer ${{ secrets.KOYEB_API_KEY }}" \
            -H "Content-Type: application/json"